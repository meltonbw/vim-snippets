# assign statement
snippet assign b
	assign ${1} = ${2:${VISUAL}};
# if statement
snippet if b
	if (${1}) begin
		${2:${VISUAL}}
	end
# if/else statements
snippet ifel b
	if (${1}) begin
		${2:${VISUAL}}
	end
	else begin
		${3}
	end
# if/else/if statements
snippet ifelif b
	if (${1}) begin
		${2:${VISUAL}}
	end
	else if (${3}) begin
		${4}
	end
# else if statement
snippet elif b
	else if (${1}) begin
		${2:${VISUAL}}
	end
# else statement
snippet el b
	else begin
		${1:${VISUAL}}
	end
# while statement
snippet wh b
	while (${1}) begin
		${2:${VISUAL}}
	end
# repeat Loop
snippet rep b
	repeat (${1}) begin
		${2:${VISUAL}}
	end
# case statement
snippet case b
	case (${1})
		${2}: begin
			${3:${VISUAL}}
		end
		default: begin
			${4}
		end
	endcase
# caseZ statement
snippet casez b
	casez (${1})
		${2}: begin
			${3:${VISUAL}}
		end
		default: begin
			${4}
		end
	endcase
# always block
snippet al b
	always @(${1}) begin
		${2:${VISUAL}}
	end
# module block
snippet module b
	module ${1:`vim_snippets#Filename('$1', 'name')`} (
		${2}
	);

		${0:${VISUAL}}

	endmodule : $1
# for
snippet for b
	for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) begin
		${4:${VISUAL}}
	end
# forever
snippet forev b
	forever begin
		${1:${VISUAL}}
	end
# function
snippet fun b
	function ${1:void} ${2:name}(${3});
		${4:${VISUAL}}
	endfunction : $2
# task
snippet task b
	task ${1:name}(${2});
		${3:${VISUAL}}
	endtask : $1
# initial 
snippet ini b
	initial begin
		${1:${VISUAL}}
	end
