# assign statement
snippet as
	assign ${1} = ${2};
# if statement
snippet if
	if (${1}) begin
		${0}
	end
# if/else statements
snippet ifel
	if (${1}) begin
		${2}
	end
	else begin
		${3}
	end
# if/else/if statements
snippet ifelif
	if (${1}) begin
		${2}
	end
	else if (${4}) begin
		${3}
	end
# else if statement
snippet elif
	else if (${1}) begin
		${0}
	end
# else statement
snippet el
	else begin
		${0}
	end
# while statement
snippet wh
	while (${1}) begin
		${0}
	end
# repeat Loop
snippet rep
	repeat (${1}) begin
		${0}
	end
# case statement
snippet case
	case (${1:/* variable */})
		${2:/* value */}: begin
			${3}
		end
		default: begin
			${4}
		end
	endcase
# caseZ statement
snippet casez
	casez (${1:/* variable */})
		${2:/* value */}: begin
			${3}
		end
		default: begin
			${4}
		end
	endcase
# always block
snippet al
	always @(${1:/* sensitive list */}) begin
		${0}
	end
# module block
snippet mod
	module ${1:`vim_snippets#Filename('$1', 'name')`} (${2});
		${0}
	endmodule
# for
snippet for
	for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) begin
		${4}
	end
# forever
snippet forev
	forever begin
		${0}
	end
# function
snippet fun
	function ${1:void} ${2:name}(${3});
		${0}
	endfunction: $2
# task
snippet task
	task ${1:name}(${2});
		${0}
	endtask: $1
# initial 
snippet ini
	initial begin
		${0}
	end
# typedef struct packed
snippet tdsp
	typedef struct packed {
		int ${2:data};
	} ${1:`vim_snippets#Filename('$1_t', 'name')`};
# typedef eum
snippet tde
	typedef enum ${2:logic[15:0]}
	{
		${3:REG = 16'h0000}
	} ${1:my_dest_t};
